---
# Source: provisioner/templates/provisioner.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-provisioner-config
  namespace: kube-system
data:
  storageClassMap: |
    local-disk:
       hostDir: /dev
       mountDir: /dev
       blockCleanerCommand:
         - "hostname"
         #- "/scripts/quick_reset.sh"
       volumeMode: Filesystem
       fsType: ext4
       namePattern: md0
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: local-volume-provisioner
  namespace: kube-system
  labels:
    app: local-volume-provisioner
spec:
  selector:
    matchLabels:
      app: local-volume-provisioner
  template:
    metadata:
      labels:
        app: local-volume-provisioner
    spec:
      serviceAccountName: local-storage-admin
      nodeSelector:
        local-nvme-raid: "true"
      initContainers:
        - name: aks-nvme-ssd-provisioner
          image: {{ .Values.image }}
          imagePullPolicy: Always
          securityContext:
            privileged: true
          command: 
            - /bin/bash
            - -c
            - |
              nvme_device_list=($(ls /sys/block | grep nvme | xargs -I. echo /dev/. || true))
              nvme_device_count=${#nvme_device_list[@]}
              raid_device=${raid_device:-/dev/md0}

              if [ -e "$raid_device" ]; then
                mdadm --stop $raid_device
                mdadm --remove $raid_device
              fi

              for device in "${nvme_device_list[@]}"; do
                mdadm --zero-superblock "$device"
                echo "Superblock wiped on $device"
              done

              mdadm --create --verbose $raid_device --level=0 --raid-devices=${#nvme_device_list[@]} ${nvme_device_list[*]}
              while [ -n "$(mdadm --detail $raid_device | grep -ioE 'State :.*resyncing')" ]; do
                echo "Raid is resyncing.."
                sleep 1
              done
              sleep 30
      containers:
        - image: "mcr.microsoft.com/k8s/local-volume-provisioner:v2.7.0"
          name: provisioner
          imagePullPolicy: IfNotPresent
          args:
            - "--v=2"
          securityContext:
            privileged: true
          env:
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - mountPath: /etc/provisioner/config
              name: provisioner-config
              readOnly: true
            - mountPath: /dev/
              name: local-disk
              mountPropagation: "HostToContainer"
      volumes:
        - name: provisioner-config
          configMap:
            name: local-provisioner-config
        - name: local-disk
          hostPath:
            path: /dev/

---
# Source: provisioner/templates/provisioner-service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-storage-admin
  namespace: kube-system

---
# Source: provisioner/templates/provisioner-cluster-role-binding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-storage-provisioner-pv-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: local-storage-admin
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:persistent-volume-provisioner
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-storage-provisioner-node-clusterrole
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-storage-provisioner-node-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: local-storage-admin
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: local-storage-provisioner-node-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-disk
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer  # Immediate is not supported
reclaimPolicy: Delete  # available values: Delete, Retain